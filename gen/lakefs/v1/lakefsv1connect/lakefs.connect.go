// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lakefs/v1/lakefs.proto

package lakefsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/treeverse/lakefs/gen/proto/go/lakefs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LakeFSServiceName is the fully-qualified name of the LakeFSService service.
	LakeFSServiceName = "lakefs.v1.LakeFSService"
)

// LakeFSServiceClient is a client for the lakefs.v1.LakeFSService service.
type LakeFSServiceClient interface {
	GetObject(context.Context, *connect_go.Request[v1.GetObjectRequest]) (*connect_go.ServerStreamForClient[v1.GetObjectResponse], error)
	UploadObject(context.Context) *connect_go.ClientStreamForClient[v1.UploadObjectRequest, v1.UploadObjectResponse]
	ListObjects(context.Context, *connect_go.Request[v1.ListObjectsRequest]) (*connect_go.Response[v1.ListObjectsResponse], error)
}

// NewLakeFSServiceClient constructs a client for the lakefs.v1.LakeFSService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLakeFSServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LakeFSServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lakeFSServiceClient{
		getObject: connect_go.NewClient[v1.GetObjectRequest, v1.GetObjectResponse](
			httpClient,
			baseURL+"/lakefs.v1.LakeFSService/GetObject",
			opts...,
		),
		uploadObject: connect_go.NewClient[v1.UploadObjectRequest, v1.UploadObjectResponse](
			httpClient,
			baseURL+"/lakefs.v1.LakeFSService/UploadObject",
			opts...,
		),
		listObjects: connect_go.NewClient[v1.ListObjectsRequest, v1.ListObjectsResponse](
			httpClient,
			baseURL+"/lakefs.v1.LakeFSService/ListObjects",
			opts...,
		),
	}
}

// lakeFSServiceClient implements LakeFSServiceClient.
type lakeFSServiceClient struct {
	getObject    *connect_go.Client[v1.GetObjectRequest, v1.GetObjectResponse]
	uploadObject *connect_go.Client[v1.UploadObjectRequest, v1.UploadObjectResponse]
	listObjects  *connect_go.Client[v1.ListObjectsRequest, v1.ListObjectsResponse]
}

// GetObject calls lakefs.v1.LakeFSService.GetObject.
func (c *lakeFSServiceClient) GetObject(ctx context.Context, req *connect_go.Request[v1.GetObjectRequest]) (*connect_go.ServerStreamForClient[v1.GetObjectResponse], error) {
	return c.getObject.CallServerStream(ctx, req)
}

// UploadObject calls lakefs.v1.LakeFSService.UploadObject.
func (c *lakeFSServiceClient) UploadObject(ctx context.Context) *connect_go.ClientStreamForClient[v1.UploadObjectRequest, v1.UploadObjectResponse] {
	return c.uploadObject.CallClientStream(ctx)
}

// ListObjects calls lakefs.v1.LakeFSService.ListObjects.
func (c *lakeFSServiceClient) ListObjects(ctx context.Context, req *connect_go.Request[v1.ListObjectsRequest]) (*connect_go.Response[v1.ListObjectsResponse], error) {
	return c.listObjects.CallUnary(ctx, req)
}

// LakeFSServiceHandler is an implementation of the lakefs.v1.LakeFSService service.
type LakeFSServiceHandler interface {
	GetObject(context.Context, *connect_go.Request[v1.GetObjectRequest], *connect_go.ServerStream[v1.GetObjectResponse]) error
	UploadObject(context.Context, *connect_go.ClientStream[v1.UploadObjectRequest]) (*connect_go.Response[v1.UploadObjectResponse], error)
	ListObjects(context.Context, *connect_go.Request[v1.ListObjectsRequest]) (*connect_go.Response[v1.ListObjectsResponse], error)
}

// NewLakeFSServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLakeFSServiceHandler(svc LakeFSServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/lakefs.v1.LakeFSService/GetObject", connect_go.NewServerStreamHandler(
		"/lakefs.v1.LakeFSService/GetObject",
		svc.GetObject,
		opts...,
	))
	mux.Handle("/lakefs.v1.LakeFSService/UploadObject", connect_go.NewClientStreamHandler(
		"/lakefs.v1.LakeFSService/UploadObject",
		svc.UploadObject,
		opts...,
	))
	mux.Handle("/lakefs.v1.LakeFSService/ListObjects", connect_go.NewUnaryHandler(
		"/lakefs.v1.LakeFSService/ListObjects",
		svc.ListObjects,
		opts...,
	))
	return "/lakefs.v1.LakeFSService/", mux
}

// UnimplementedLakeFSServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLakeFSServiceHandler struct{}

func (UnimplementedLakeFSServiceHandler) GetObject(context.Context, *connect_go.Request[v1.GetObjectRequest], *connect_go.ServerStream[v1.GetObjectResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lakefs.v1.LakeFSService.GetObject is not implemented"))
}

func (UnimplementedLakeFSServiceHandler) UploadObject(context.Context, *connect_go.ClientStream[v1.UploadObjectRequest]) (*connect_go.Response[v1.UploadObjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lakefs.v1.LakeFSService.UploadObject is not implemented"))
}

func (UnimplementedLakeFSServiceHandler) ListObjects(context.Context, *connect_go.Request[v1.ListObjectsRequest]) (*connect_go.Response[v1.ListObjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lakefs.v1.LakeFSService.ListObjects is not implemented"))
}
