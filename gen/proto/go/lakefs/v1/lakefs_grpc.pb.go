// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: lakefs/v1/lakefs.proto

package lakefsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LakeFSServiceClient is the client API for LakeFSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LakeFSServiceClient interface {
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (LakeFSService_GetObjectClient, error)
	UploadObject(ctx context.Context, opts ...grpc.CallOption) (LakeFSService_UploadObjectClient, error)
}

type lakeFSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLakeFSServiceClient(cc grpc.ClientConnInterface) LakeFSServiceClient {
	return &lakeFSServiceClient{cc}
}

func (c *lakeFSServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (LakeFSService_GetObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &LakeFSService_ServiceDesc.Streams[0], "/lakefs.v1.LakeFSService/GetObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &lakeFSServiceGetObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LakeFSService_GetObjectClient interface {
	Recv() (*GetObjectResponse, error)
	grpc.ClientStream
}

type lakeFSServiceGetObjectClient struct {
	grpc.ClientStream
}

func (x *lakeFSServiceGetObjectClient) Recv() (*GetObjectResponse, error) {
	m := new(GetObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lakeFSServiceClient) UploadObject(ctx context.Context, opts ...grpc.CallOption) (LakeFSService_UploadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &LakeFSService_ServiceDesc.Streams[1], "/lakefs.v1.LakeFSService/UploadObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &lakeFSServiceUploadObjectClient{stream}
	return x, nil
}

type LakeFSService_UploadObjectClient interface {
	Send(*UploadObjectRequest) error
	CloseAndRecv() (*UploadObjectResponse, error)
	grpc.ClientStream
}

type lakeFSServiceUploadObjectClient struct {
	grpc.ClientStream
}

func (x *lakeFSServiceUploadObjectClient) Send(m *UploadObjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lakeFSServiceUploadObjectClient) CloseAndRecv() (*UploadObjectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LakeFSServiceServer is the server API for LakeFSService service.
// All implementations must embed UnimplementedLakeFSServiceServer
// for forward compatibility
type LakeFSServiceServer interface {
	GetObject(*GetObjectRequest, LakeFSService_GetObjectServer) error
	UploadObject(LakeFSService_UploadObjectServer) error
	mustEmbedUnimplementedLakeFSServiceServer()
}

// UnimplementedLakeFSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLakeFSServiceServer struct {
}

func (UnimplementedLakeFSServiceServer) GetObject(*GetObjectRequest, LakeFSService_GetObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedLakeFSServiceServer) UploadObject(LakeFSService_UploadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadObject not implemented")
}
func (UnimplementedLakeFSServiceServer) mustEmbedUnimplementedLakeFSServiceServer() {}

// UnsafeLakeFSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LakeFSServiceServer will
// result in compilation errors.
type UnsafeLakeFSServiceServer interface {
	mustEmbedUnimplementedLakeFSServiceServer()
}

func RegisterLakeFSServiceServer(s grpc.ServiceRegistrar, srv LakeFSServiceServer) {
	s.RegisterService(&LakeFSService_ServiceDesc, srv)
}

func _LakeFSService_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LakeFSServiceServer).GetObject(m, &lakeFSServiceGetObjectServer{stream})
}

type LakeFSService_GetObjectServer interface {
	Send(*GetObjectResponse) error
	grpc.ServerStream
}

type lakeFSServiceGetObjectServer struct {
	grpc.ServerStream
}

func (x *lakeFSServiceGetObjectServer) Send(m *GetObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LakeFSService_UploadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LakeFSServiceServer).UploadObject(&lakeFSServiceUploadObjectServer{stream})
}

type LakeFSService_UploadObjectServer interface {
	SendAndClose(*UploadObjectResponse) error
	Recv() (*UploadObjectRequest, error)
	grpc.ServerStream
}

type lakeFSServiceUploadObjectServer struct {
	grpc.ServerStream
}

func (x *lakeFSServiceUploadObjectServer) SendAndClose(m *UploadObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lakeFSServiceUploadObjectServer) Recv() (*UploadObjectRequest, error) {
	m := new(UploadObjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LakeFSService_ServiceDesc is the grpc.ServiceDesc for LakeFSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LakeFSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lakefs.v1.LakeFSService",
	HandlerType: (*LakeFSServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetObject",
			Handler:       _LakeFSService_GetObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadObject",
			Handler:       _LakeFSService_UploadObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "lakefs/v1/lakefs.proto",
}
