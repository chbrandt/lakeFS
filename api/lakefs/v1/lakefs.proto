syntax = "proto3";

package lakefs.v1;

option go_package = "github.com/treeverse/lakefs/gen/proto/go/lakefs/v1;lakefsv1";

import "google/protobuf/timestamp.proto";

message GetObjectRequest {
  string repository = 1;
  string ref = 2;
  string path = 3;
  string range = 4;
  bool pre_signed = 5;
}

message GetObjectResponse {
  bytes chunk = 1;
  string pre_signed_url = 2;
}


message UploadObjectInfo {
  string repository = 1;
  string branch = 2;
  string path = 3;
  string content_type = 4;
  map<string, string> metadata = 5;
  bool allow_overwrite = 6;
}

message UploadObjectRequest {
  oneof data {
    UploadObjectInfo info = 1;
    bytes chunk = 2;
  }
}

message UploadObjectResponse {
  string path = 1;
  string physical_address = 2;
  string checksum = 3;
  int64 size_bytes = 4;
  google.protobuf.Timestamp mtime = 5;
  map<string, string> metadata = 6;
  string content_type = 7;
}

message ListObjectsRequest {
  string repository = 1;
  string ref = 2;
  bool user_metadata = 3;
  bool pre_signed = 4;
  string delimiter = 5;
  string prefix = 6;
  int32 page_size = 7;
  string page_token = 8;
}

enum PathType {
  PATH_TYPE_UNSPECIFIED = 0;
  PATH_TYPE_OBJECT = 1;
  PATH_TYPE_COMMON_PREFIX = 2;
}

message ObjectInfo  {
  string path = 1;
  PathType path_type = 2;
  string physical_address = 3;
  string checksum = 4;
  int64 size_bytes = 5;
  google.protobuf.Timestamp mtime = 6;
  map<string, string> user_metadata = 7;
  string content_type = 8;
}

message ListObjectsResponse {
  repeated ObjectInfo objects = 1;
  string next_page_token = 2;
}

service LakeFSService {
  rpc GetObject(GetObjectRequest) returns (stream GetObjectResponse) {}
  rpc UploadObject(stream UploadObjectRequest) returns (UploadObjectResponse) {}
  rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse) {}
}